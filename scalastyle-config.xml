<scalastyle commentFilter="enabled">
    <name>Scalastyle Swisscom configuration</name>
    <check class="org.scalastyle.file.FileTabChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.file.FileLengthChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[800]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.file.HeaderMatchesChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="header"><![CDATA[]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.SpacesAfterPlusChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.file.WhitespaceEndOfLineChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.SpacesBeforePlusChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.file.FileLineLengthChecker" level="error" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[200]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports"><![CDATA[true]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.ClassNamesChecker" level="error" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.ObjectNamesChecker" level="error" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.PackageObjectNamesChecker" level="error" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.EqualsHashCodeChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.IllegalImportsChecker" level="error" enabled="false">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.ParameterNumberChecker" level="error" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[10]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.MagicNumberChecker" level="warning" enabled="true">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.ReturnChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.NullChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.NoCloneChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.NoFinalizeChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.CovariantEqualsChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.StructuralTypeChecker" level="error" enabled="true"></check>
    <check customId="println" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">^println$</parameter>
        </parameters>
        <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with
																																		       // scalastyle:off println
																																		          println(...)
																																			     // scalastyle:on println]]></customMessage>
    </check>
    <check customId="javaconversions" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex">JavaConversions</parameter>
        </parameters>
        <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import
            scala.collection.JavaConverters._ and use .asScala / .asJava methods
        </customMessage>
    </check>
    <check class="org.scalastyle.scalariform.NumberOfTypesChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.CyclomaticComplexityChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.UppercaseLChecker" level="error" enabled="true"></check>
    <check class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.IfBraceChecker" level="error" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.MethodLengthChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.MethodNamesChecker" level="warning" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z\+-/\*][A-Za-z0-9]*$]]></parameter>
            <parameter name="ignoreRegex"><![CDATA[^$]]></parameter>
            <parameter name="ignoreOverride"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="maxMethods"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" level="error" enabled="true">
        <parameters>
            <parameter name="ignoreOverride"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.file.NewLineAtEofChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.file.NoNewLineAtEofChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.WhileChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.VarFieldChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.VarLocalChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.RedundantIfChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.DeprecatedJavaChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.EmptyClassChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.ClassTypeParameterChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.UnderscoreImportChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.LowercasePatternMatchChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" level="warning" enabled="false">
        <parameters>
            <parameter name="allowed"><![CDATA[1]]></parameter>
            <parameter name="ignoreRegex"><![CDATA[^""$]]></parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.scalariform.ImportGroupingChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.NotImplementedErrorUsage" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.BlockImportChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.ProcedureDeclarationChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.ForBraceChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" level="warning" enabled="true"></check>
    <check class="org.scalastyle.scalariform.ScalaDocChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" level="warning" enabled="false"></check>
    <check class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" level="warning"
           enabled="false"></check>
    <check class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" level="warning"
           enabled="false"></check>
    <check class="org.scalastyle.scalariform.NonASCIICharacterChecker" level="error" enabled="true"></check>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY,
                LARROW, RARROW
            </parameter>
        </parameters>
    </check>
    <check class="org.scalastyle.file.IndentationChecker" level="warning" enabled="true">
        <parameters>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
        </parameters>
    </check>
</scalastyle>

